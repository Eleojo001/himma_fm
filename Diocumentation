
1. Documentation for App Component
The App component is the main component of the React application that manages routing across various pages and sections using React Router. It serves as the central hub for navigation within the application, ensuring that different parts of the site are accessible through the URL paths defined in the routing setup.

Key Functionalities
Router Setup:

The component uses BrowserRouter from react-router-dom to handle client-side routing.
Inside BrowserRouter, it sets up routes using the Routes and Route components, which map specific URL paths to corresponding React components.
Routes Configuration:

The routes in the application include:
/: Renders the Home component.
/page/:id/: Renders the Page component, supporting dynamic routing with a parameter (:id) to display specific content based on the ID.
Detailed Views:
/news/:id: Renders the NewsDetails component for detailed news articles.
/presenters/:id: Renders the PresenterDetails component for individual presenter profiles.
/full/:id: Renders the ShowsDetails component for detailed show information.
/Himma-Tv/:id: Renders the TvDetails component for detailed TV content.
Additional Pages:
/radio: Renders the Radio component.
/about: Renders the About component.
/contact: Renders the Contact component.
Navigation Sections:
/news: Renders the NavNews component, providing navigation for news.
/presenters: Renders the NavPresenters component, offering navigation for presenter-related content.
/Himma-tv: Renders the NavTv component for TV-related navigation.
/programmes: Renders the NavShows component for navigating different shows.
/podcast: Renders the Podcast component for accessing podcasts.
/admin: Renders the AdHome component for the admin home page.
Wildcard Route (*): Renders the NoteFound component for any unspecified paths, providing a "Page Not Found" experience.
Footer Component:

The Footer component is rendered outside of the routing structure to ensure it appears consistently across all pages.
Styling and Layout:

The application uses a CSS file (App.css) for styling the layout, including a class home-container that provides additional structure or spacing within the main application layout.
Usage
To utilize this App component, include it as the root component in your React application. Make sure that all imported components are correctly implemented and available in their respective paths. Also, ensure that the React Router library is installed and configured correctly in your project.

This component sets up a clean and organized structure for navigating through various sections of your application, making it easy to add or modify routes as needed.


2.Documentation for HomeBanner Component

Component: HomeBanner
Purpose:
The HomeBanner component is responsible for rendering a banner on the home page that includes a section with a "Listen Live" link. This banner is part of the UI for the home page, providing a visual cue and a link to listen to live radio.

Key Features:
Banner Layout: The component renders a div structure styled to look like a banner.
Live Listening Link: It includes a clickable section that links to a /radio page, indicating a live stream or broadcast feature.
Code Explanation:
Imports:

The component imports React along with hooks (useEffect, useState, useContext), although currently, these hooks are not utilized in the component.
The DataContext import suggests there is a context for global data, but it is not used within this component.
Link from react-router-dom is used for client-side navigation.
Inline Styling:

An inline style object imageStyle is defined to control the dimensions and positioning of the image used in the "Listen Live" section.
JSX Structure:

Home Banner: The main container for the banner is a div with the class homeBanner.
Section Layout:
Inside the banner, there is another div with the class homeBannerEvents containing a nested div with the class homeBannerSection1.
This nested section has a black background, set via inline styling (backgroundColor: 'black').
Listen Live Link:
A Link component wraps the content of the live listening section, pointing to the /radio route.
It contains an image (Red_circle.gif) styled with the previously defined imageStyle and a text label "Listen Live" in red color and larger font size.
Accessibility & UX:

The "Listen Live" link is styled to be noticeable with a red color scheme and a moving GIF to attract attention, indicating a live broadcast or interactive element.

3. Documentation For News.JS

The News component is designed to display a list of news items in a grid format, with a dynamic loading feature that allows users to view more items by clicking a "View More" button. It utilizes data from a shared context (DataContext) to populate its content.

States
news: A state variable intended to hold news items fetched from an API, though currently not used.
visible: Controls the number of news items displayed; initialized to 4 and increases in increments of 4 when the "View More" button is clicked.
section: Holds the news data retrieved from the DataContext, specifically from the category.News key.
Key Operations
Fetching Data:

On component mount, the useEffect hook sets the section state with data from the DataContext.
Example of a fetch call is provided but commented out; it demonstrates how data could be fetched from an external API and stored in the news state.
Displaying News Items:

The component renders a grid of news cards using the section state, each card displaying an image and title of a news item.
Each news item links to a detailed page using the Link component from react-router-dom.
Load More Functionality:

A "View More" button at the bottom of the grid increases the number of visible items by modifying the visible state when clicked.
Styling
Inline Styles: Used to style various elements like headers, images, buttons, and links. This includes ensuring images fit correctly and maintaining a clean layout for the news cards.
This component is structured to be easily extendable and integrates smoothly with React Router for navigation between different parts of the application.

4.  Documentation for Presenters.js

The Presenters component displays a list of presenters with their images and associated programmes. It uses data from a shared context (DataContext) and renders the content in a grid layout.

States
presenter: This state stores the list of presenters, which is initially fetched from the DataContext upon component mount.
Key Operations
Fetching Data:

The component uses the useEffect hook to fetch presenter data from the DataContext when it first renders. This data is stored in the presenter state.
Displaying Presenter Profiles:

The component maps over the presenter state to render each presenter's profile. Each profile includes:
Image: Displayed in a circular format using the imageStylemobile for mobile responsiveness.
Text: Displays the presenter's name and their associated programmes in a simple list format.
Styling:

The component uses inline styles for images to make them circular and responsive, ensuring they cover the element properly without distortion (objectFit: 'cover').
Conditional styling based on screen size (e.g., imageStylemobile) is applied to keep the design adaptive.
Responsiveness
The component uses two sets of image styles (imageStyle and imageStylemobile) to handle responsiveness. The mobile-specific styles ensure the images and layout adjust well on smaller screens.

5.   Documentation for Shows.js
Overview
The Shows component displays a list of shows, each with an image, title, and time. It uses data from a shared context (DataContext) and renders the content in both desktop and mobile-friendly layouts.

States
shows: This state holds the list of shows, which is initially fetched from the DataContext upon component mount.
Key Operations
Fetching Data:

The component uses the useEffect hook to fetch shows data from the DataContext when it first renders. This data is stored in the shows state.
Displaying Show Profiles:

The component maps over the shows state to render each show's profile. Each profile includes:
Image: Displayed with rounded corners using the imageStyle for larger screens and imageStylemobile for mobile responsiveness.
Text: Displays the show's title and scheduled time in a simple list format.
Styling:

The component uses inline styles for images to ensure they maintain consistent visual appearance, such as rounded corners and proper aspect ratios, across different screen sizes.
Responsive Design:

The component has separate sections for desktop (showsContainer) and mobile (showsContainer-mobile) views to ensure that the layout adapts appropriately to the screen size.
Responsiveness
The component adjusts its layout and image styling based on the device. It uses separate sets of styles (imageStyle and imageStylemobile) to maintain an optimal visual experience on both desktop and mobile screens.






